Resources:
  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0

files:

  /etc/letsencrypt/configs/${CERTIFICATE_DOMAIN}.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      # the domain we want to get the cert for;
      # technically it's possible to have multiple of this lines, but it only worked
      # with one domain for me, another one only got one cert, so I would recommend
      # separate config files per domain.
      domains = ${CERTIFICATE_DOMAIN}

      # increase key size
      rsa-key-size = 4096 # 2048 or 4096

      # the current closed beta (as of 2015-Nov-07) is using this server
      server = https://acme-v01.api.letsencrypt.org/directory

      # this address will receive renewal reminders
      email = ${CERTIFICATE_EMAIL}

      # turn off the ncurses UI, we want this to be run as a cronjob
      text = True

      debug = True
      non-interactive = True
      agree-tos = True
      standalone = True
      staging = True

      # Obtain certificates using a DNS TXT record (if you are using Route53 for DNS).
      dns-route53 = True

      # authenticate by placing a file in the webroot (under .well-known/acme-challenge/)
      # and then letting LE fetch it
      authenticator = webroot
      webroot-path = /var/www/letsencrypt/

  /etc/letsencrypt/config/renewal-cert.sh:
    mode: "000644"
    owner: root
    group: root
    content: |
      #!/bin/sh

      cd /opt/letsencrypt/
      ./certbot-auto --config /etc/letsencrypt/configs/my-domain.conf certonly

      if [ $? -ne 0 ]
        then ERRORLOG=`tail /var/log/letsencrypt/letsencrypt.log`
          echo -e "The Let's Encrypt cert has not been renewed! \n \n" \
          $ERRORLOG
        else
          nginx -s reload
      fi

      exit 0

  /etc/nginx/conf.d/letsencrypt-temp-file.conf.txt:
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;

        location /.well-know/acme-challenge {
          root /var/www/letsencrypt;
        }
      }
  
  /var/www/letsencrypt/config/prepare_letsencrypt_nginx.sh:
    mode: "000644"
    owner: root
    group: root
    content: |
      #!/bin/bash

      mkdir /var/www/letsencrypt
      chgrp nginx /var/www/letsencrypt
      cp /etc/nginx/conf.d/letsencrypt-temp-file.conf.txt /etc/nginx/conf.d/letsencrypt-temp-file.conf"
    
      nginx -s reload
  
  /etc/nginx/conf.d/https_custom.pre:
    mode: "000644"
    owner: root
    group: root
    content: |
      # HTTPS Server

      upstream node_upstream {
        server 127.0.0.1:5000;
        keepalive 256;
      }

      server {
        listen 443;

        error_page  497 https://$host$request_uri;

        ssl on;
        ssl_certificate /etc/letsencrypt/live/${CERTIFICATE_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${CERTIFICATE_DOMAIN}/privkey.pem;

        ssl_session_timeout 5m;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_prefer_server_ciphers on;

        if ($ssl_protocol = "") {
          rewrite ^ https://$host$request_uri? permanent;
        }

        location / {
          proxy_pass http://node_upstream;
          proxy_set_header Connection "";
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
      }

  /etc/nginx/conf.d/http-redirect-custom.conf.pos:
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
        listen 80;
        return 301 https://$host$request_uri;
      }

  /opt/elasticbeanstalk/hooks/configdeploy/post/99_kill_default_nginx.sh:
    mode: "000644"
    owner: root
    group: root
    content: |
      #!/bin/bash -xe
      rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf
      service nginx stop 
      service nginx start

packages:
  yum:
    epel-release: []

container_commands:
  removeconfig:
    command: "sh /opt/elasticbeanstalk/hooks/configdeploy/post/99_kill_default_nginx.sh"
    owner: root
    group: root
  prepare_letsencrypt_nginx:
    command: "sh /var/www/letsencrypt/config/prepare_letsencrypt_nginx.sh"
    owner: root
    group: root
  00_createdir:
    command: "mkdir /opt/certbot || true"
  01_installcertbot:
    command: "wget https://dl.eff.org/certbot-auto -O /opt/certbot/certbot-auto"
  02_permission:
    command: "chmod a+x /opt/certbot/certbot-auto"
  03_getcert:
    ## command: "sudo /opt/certbot/certbot-auto certonly --debug --non-interactive --standalone --email ${CERTIFICATE_EMAIL} --agree-tos -d ${CERTIFICATE_DOMAIN} --keep-until-expiring"
    command : "sudo /opt/certbot/certbot-auto --config /etc/letsencrypt/configs/${CERTIFICATE_DOMAIN}.conf certonly"
  04_link:
    command: "ln -sf /etc/letsencrypt/live/${CERTIFICATE_DOMAIN} /etc/letsencrypt/live/${CERTIFICATE_DOMAIN}"
  05_cronjob_renew:
    ## command: "cat .ebextensions/certificate_renew.txt > /etc/cron.d/certificate_renew && chmod 644 /etc/cron.d/certificate_renew"
    command: "sudo sh /etc/letsencrypt/config/renewal-cert.sh"